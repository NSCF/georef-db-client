{"version":3,"sources":["../src/components/georef/Georef.js"],"names":["Georef","georefID","country","stateProvince","locality","verbatimCoordinates","decimalLatitude","decimalLongitude","uncertainty","uncertaintyUnit","datum","by","date","sources","originalGeorefSource","protocol","remarks","verified","verifiedBy","verifiedDate","verifiedByRole","dateCreated","Date","now","createdBy","lastEdited","lastEditedBy","lastEditRemarks","Object","defineProperties","protocolObject","enumerable","get","trim","r","value","label","undefined","set","obj","sourcesArray","sourceItems","split","filter","x","map","length","selectedSources","item","push","Array","isArray","join","dateOkay","writable","verifiedDateOkay","uncertaintyUnitOkay","copy","entries","key","val","assign","keys","coordsString","parts","Number","isNaN","re","test","decimalCoordinates","contains"],"mappings":"i4CAAqBA,M;AACnB,oBAAc;AACZ,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,mBAAL,GAA2B,IAA3B;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,WAAL,GAAmBC,KAAKC,GAAL,EAAnB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,eAAL,GAAuB,IAAvB;;AAEAC,WAAOC,gBAAP,CAAwB,IAAxB,EAA8B;AAC5BC,sBAAgB;AACdC,oBAAY,KADE;AAEdC,WAFc,iBAER;AACJ,cAAG,KAAKjB,QAAL,IAAiB,KAAKA,QAAL,CAAckB,IAAd,EAApB,EAAyC;AACvC,gBAAIC,IAAI,EAACC,OAAO,KAAKpB,QAAb,EAAuBqB,OAAO,KAAKrB,QAAnC,EAAR;AACA,mBAAOmB,CAAP;AACD,WAHD;AAIK;AACH,mBAAOG,SAAP;AACD;AACF,SAVa;AAWdC,WAXc,eAWVC,GAXU,EAWL;AACP,cAAGA,GAAH,EAAO;AACL,iBAAKxB,QAAL,GAAgBwB,IAAIJ,KAApB;AACD,WAFD;AAGK;AACH,iBAAKpB,QAAL,GAAgB,IAAhB;AACD;AACF,SAlBa,EADY;;AAqB5ByB,oBAAc;AACZT,oBAAY,KADA;AAEZC,WAFY,iBAEN;AACJ,cAAG,KAAKnB,OAAL,IAAgB,KAAKA,OAAL,CAAaoB,IAAb,EAAnB,EAAuC;AACrC,gBAAIQ,cAAc,KAAK5B,OAAL,CAAa6B,KAAb,CAAmB,GAAnB,EAAwBC,MAAxB,CAA+B,qBAAGC,CAAH,EAA/B,EAAqCC,GAArC,CAAyC,qBAAGD,EAAEX,IAAF,EAAH,EAAzC,EAAsDU,MAAtD,CAA6D,qBAAGC,CAAH,EAA7D,CAAlB;AACA,gBAAGH,YAAYK,MAAf,EAAuB;AACrB,kBAAIC,kBAAkB,EAAtB,CADqB;AAErB,qCAAiBN,WAAjB,8HAA6B,KAApBO,IAAoB;AAC3BD,kCAAgBE,IAAhB,CAAqB,EAACd,OAAOa,IAAR,EAAcZ,OAAMY,IAApB,EAArB;AACD,iBAJoB;AAKrB,qBAAOD,eAAP;AACD,aAND;AAOK;AACH,qBAAO,IAAP;AACD;AACF,WAZD;AAaK;AACH,mBAAO,IAAP;AACD;AACF,SAnBW;AAoBZT,WApBY,eAoBRS,eApBQ,EAoBQ,CAAE;AACpB,cAAGG,MAAMC,OAAN,CAAcJ,eAAd,CAAH,EAAmC;AACjC,iBAAKlC,OAAL,GAAekC,gBAAgBF,GAAhB,CAAoB,qBAAGD,EAAET,KAAL,EAApB,EAAgCiB,IAAhC,CAAqC,KAArC,CAAf;AACD,WAFD;AAGK;AACH,iBAAKvC,OAAL,GAAe,IAAf;AACD;AACF,SA3BW,EArBc;;AAkD5BwC,gBAAU;AACRlB,eAAM,IADE;AAERmB,kBAAU,IAFF;AAGRvB,oBAAY,KAHJ,EAlDkB;;AAuD5BwB,wBAAkB;AAChBpB,eAAM,IADU;AAEhBmB,kBAAU,IAFM;AAGhBvB,oBAAY,KAHI,EAvDU;;AA4D5ByB,2BAAqB;AACnBrB,eAAM,IADa;AAEnBmB,kBAAU,IAFS;AAGnBvB,oBAAY,KAHO,EA5DO,EAA9B;;;AAkED;;AAED;8DACO;AACL,UAAI0B,OAAO,IAAIzD,MAAJ,EAAX,CADK;AAEL,8BAAuB4B,OAAO8B,OAAP,CAAe,IAAf,CAAvB,mIAA4C,oDAAlCC,GAAkC,mBAA7BC,GAA6B;;AAE1C,cAAGD,OAAO,gBAAV,EAA2B;AACzBF,iBAAKE,GAAL,IAAY/B,OAAOiC,MAAP,CAAc,EAAd,EAAkBD,GAAlB,CAAZ;AACA;AACD;;AAED,cAAGD,OAAO,cAAV,EAAyB;AACvBF,iBAAKE,GAAL,IAAYC,IAAIf,GAAJ,CAAQ,qBAAGjB,OAAOiC,MAAP,CAAc,EAAd,EAAkBjB,CAAlB,CAAH,EAAR,CAAZ,CADuB,CACsB;AAC7C;AACD;;AAEDa,eAAKE,GAAL,IAAYC,GAAZ;AACD,SAfI;AAgBL,aAAOH,IAAP;AACD;;AAED;6CACO;AACL,8BAAgB7B,OAAOkC,IAAP,CAAY,IAAZ,CAAhB,mIAAkC,KAAzBH,GAAyB;AAChC,eAAKA,GAAL,IAAY,IAAZ;AACD,SAHI;AAIL,WAAK7B,cAAL,GAAsB,IAAtB;AACA,WAAKU,YAAL,GAAoBH,SAApB;AACA,WAAKhB,WAAL,GAAmBC,KAAKC,GAAL,EAAnB;AACD,K;;AAEwB;AACvB,UAAG,KAAKjB,eAAL,IAAwB,KAAKC,gBAAhC,EAAkD;AAChD,eAAO,KAAKD,eAAL,GAAwB,GAAxB,GAA8B,KAAKC,gBAA1C;AACD,OAFD;AAGK;AACH,eAAO,IAAP;AACD;AACF;;AAED;wBACuBwD,Y,EAAa;AAClC,UAAGA,gBAAgBA,aAAa9B,IAAb,EAAnB,EAAwC;AACtC,YAAI+B,QAAQD,aAAarB,KAAb,CAAmB,GAAnB,CAAZ;AACA,aAAKpC,eAAL,GAAuB2D,OAAOD,MAAM,CAAN,CAAP,CAAvB;AACA,aAAKzD,gBAAL,GAAwB0D,OAAOD,MAAM,CAAN,CAAP,CAAxB;AACD;;AAEF;;AAED;0DAC6B;AAC3B,UAAG,KAAK1D,eAAL,IAAwB,KAAKC,gBAAhC,EAAiD;AAC/C,YAAI2D,MAAM,KAAK5D,eAAX,KAA+B4D,MAAM,KAAK3D,gBAAX,CAAnC,EAAiE;AAC/D,iBAAO,KAAP;AACD;;AAED,YAAG,KAAKD,eAAL,GAAuB,EAAvB,IAA6B,KAAKC,gBAAL,GAAwB,CAAC,EAAzD,EAA6D;AAC3D,iBAAO,KAAP;AACD;;AAED,YAAG,KAAKA,gBAAL,GAAwB,GAAxB,IAA+B,KAAKA,gBAAL,GAAwB,CAAC,GAA3D,EAA+D;AAC7D,iBAAO,KAAP;AACD;;AAED;AACA,YAAI4D,KAAK,oCAAT;AACA,YAAI,CAACA,GAAGC,IAAH,CAAQ,KAAKC,kBAAb,CAAL,EAAuC;AACrC,iBAAO,KAAP;AACD;;AAED;AACA,eAAO,IAAP;AACD,OArBD;AAsBK;AACH,eAAO,IAAP;AACD;;AAEF;;AAED;6DACgC;AAC9B,UAAIF,KAAK,4CAAT;AACA,UAAI,CAACA,GAAGC,IAAH,CAAQ,KAAKC,kBAAb,CAAL,EAAuC;AACrC,eAAO,IAAP;AACD,OAFD;AAGK;AACH,eAAO,KAAP;AACD;AACF,K;;AAEc;AACb,UAAG,KAAKzD,IAAL,IAAa,KAAKA,IAAL,CAAUqB,IAAV,EAAhB,EAAkC;AAChC,eAAO,0DAAyDmC,IAAzD,CAA8D,KAAKxD,IAAnE,KAA4E,IAAIU,IAAJ,CAAS,KAAKV,IAAd,IAAsBU,KAAKC,GAAL,EAAzG;AACD,OAFD;AAGK;AACH,eAAO,IAAP,CADG,CACS;AACb;;AAEF,K;;AAEsB;AACrB,UAAG,KAAKJ,YAAL,IAAqB,KAAKA,YAAL,CAAkBc,IAAlB,EAAxB,EAAiD;AAC/C,eAAO,0DAAyDmC,IAAzD,CAA8D,KAAKjD,YAAnE,KAAoF,IAAIG,IAAJ,CAAS,KAAKH,YAAd,IAA8BG,KAAKC,GAAL,EAAzH;AACD,OAFD;AAGK;AACH,eAAO,IAAP,CADG,CACS;AACb;AACF,K;;AAEyB;AACxB,UAAG,KAAKf,WAAR,EAAqB;AACnB,YAAG,CAAC,KAAKC,eAAN,IAAyB,CAAC,KAAKA,eAAL,CAAqBwB,IAArB,EAA1B,IAAyD,CAAC,CAAC,GAAD,EAAK,IAAL,EAAWqC,QAAX,CAAoB,KAAK7D,eAAL,CAAqBwB,IAArB,EAApB,CAA7D,EAA8G;AAC5G,iBAAO,KAAP;AACD;AACF;AACD;AACA,aAAO,IAAP;AACD,K,yCArNkBjC,M","file":"Georef.js","sourcesContent":["export default class Georef {\r\n  constructor() {\r\n    this.georefID = null\r\n    this.country = null\r\n    this.stateProvince = null\r\n    this.locality = null\r\n    this.verbatimCoordinates = null\r\n    this.decimalLatitude = null\r\n    this.decimalLongitude = null\r\n    this.uncertainty = null\r\n    this.uncertaintyUnit = null\r\n    this.datum = null\r\n    this.by = null\r\n    this.date = null\r\n    this.sources = null\r\n    this.originalGeorefSource = null\r\n    this.protocol = null\r\n    this.remarks = null\r\n    this.verified = false\r\n    this.verifiedBy = null\r\n    this.verifiedDate = null\r\n    this.verifiedByRole = null\r\n    this.dateCreated = Date.now()\r\n    this.createdBy = null\r\n    this.lastEdited = null\r\n    this.lastEditedBy = null\r\n    this.lastEditRemarks = null\r\n\r\n    Object.defineProperties(this, {\r\n      protocolObject: {\r\n        enumerable: false,\r\n        get() {\r\n          if(this.protocol && this.protocol.trim()){\r\n            let r = {value: this.protocol, label: this.protocol}\r\n            return r\r\n          }\r\n          else {\r\n            return undefined\r\n          }\r\n        },\r\n        set(obj) {\r\n          if(obj){\r\n            this.protocol = obj.value\r\n          }\r\n          else {\r\n            this.protocol = null\r\n          }\r\n        }\r\n      }, \r\n      sourcesArray: {\r\n        enumerable: false,\r\n        get() {\r\n          if(this.sources && this.sources.trim()){\r\n            let sourceItems = this.sources.split('|').filter(x=>x).map(x=>x.trim()).filter(x=>x)\r\n            if(sourceItems.length) {\r\n              let selectedSources = []\r\n              for (let item of sourceItems){\r\n                selectedSources.push({value: item, label:item})\r\n              }\r\n              return selectedSources\r\n            }\r\n            else {\r\n              return null\r\n            }\r\n          }\r\n          else {\r\n            return null\r\n          }\r\n        },\r\n        set(selectedSources){ //for taking an array of {value, label} objects used for a <select>, throws if any problems\r\n          if(Array.isArray(selectedSources)) {\r\n            this.sources = selectedSources.map(x=>x.value).join(' | ')\r\n          }\r\n          else {\r\n            this.sources = null\r\n          }\r\n        }\r\n      }, \r\n      dateOkay: {\r\n        value:true,\r\n        writable: true,\r\n        enumerable: false\r\n      }, \r\n      verifiedDateOkay: {\r\n        value:true,\r\n        writable: true,\r\n        enumerable: false\r\n      }, \r\n      uncertaintyUnitOkay: {\r\n        value:true,\r\n        writable: true,\r\n        enumerable: false\r\n      }\r\n    }) \r\n  }\r\n\r\n  //deep copy\r\n  copy() {\r\n    let copy = new Georef()\r\n    for (let [key, val] of Object.entries(this)){\r\n      \r\n      if(key == 'protocolObject'){\r\n        copy[key] = Object.assign({}, val)\r\n        continue\r\n      }\r\n\r\n      if(key == 'sourcesArray'){\r\n        copy[key] = val.map(x=>Object.assign({}, x)) //sourcesArray is an array of objects\r\n        continue\r\n      }\r\n\r\n      copy[key] = val\r\n    }\r\n    return copy\r\n  }\r\n\r\n  //empty everything\r\n  clear(){\r\n    for (let key of Object.keys(this)){\r\n      this[key] = null\r\n    }\r\n    this.protocolObject = null\r\n    this.sourcesArray = undefined\r\n    this.dateCreated = Date.now()\r\n  }\r\n\r\n  get decimalCoordinates() {\r\n    if(this.decimalLatitude && this.decimalLongitude) {\r\n      return this.decimalLatitude  + ',' + this.decimalLongitude\r\n    }\r\n    else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  //assumed already validated\r\n  set decimalCoordinates(coordsString){\r\n    if(coordsString && coordsString.trim()) {\r\n      let parts = coordsString.split(',')\r\n      this.decimalLatitude = Number(parts[0])\r\n      this.decimalLongitude = Number(parts[1])\r\n    }\r\n    \r\n  }\r\n\r\n  //this is validation\r\n  get decimalCoordinatesOkay() {\r\n    if(this.decimalLatitude && this.decimalLongitude){\r\n      if (isNaN(this.decimalLatitude) || isNaN(this.decimalLongitude)) {\r\n        return false\r\n      }\r\n\r\n      if(this.decimalLatitude > 90 || this.decimalLongitude < -90) {\r\n        return false\r\n      }\r\n\r\n      if(this.decimalLongitude > 180 || this.decimalLongitude < -180){\r\n        return false\r\n      }\r\n\r\n      //Check they are actually decimals\r\n      let re = /^-?\\d{1,2}\\.\\d+,\\s*-?\\d{1,3}\\.\\d+$/\r\n      if (!re.test(this.decimalCoordinates)) {\r\n        return false\r\n      }\r\n      \r\n      //else\r\n      return true\r\n    }\r\n    else {\r\n      return true\r\n    }\r\n\r\n  }\r\n\r\n  //this just to show warnings for those with too few or too many decimals\r\n  get decimalCoordinatesWarning() {\r\n    let re = /^-?\\d{1,2}\\.\\d{4,8},\\s*-?\\d{1,3}\\.\\d{4,8}$/\r\n    if (!re.test(this.decimalCoordinates)) {\r\n      return true\r\n    }\r\n    else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  get dateOkay() {\r\n    if(this.date && this.date.trim()) {\r\n      return /^(19|20)\\d\\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.test(this.date) && new Date(this.date) < Date.now()\r\n    }\r\n    else {\r\n      return true //we dont' test for it being required here\r\n    }\r\n    \r\n  }\r\n\r\n  get verifiedDateOkay() {\r\n    if(this.verifiedDate && this.verifiedDate.trim()){\r\n      return /^(19|20)\\d\\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/.test(this.verifiedDate) && new Date(this.verifiedDate) < Date.now()\r\n    }\r\n    else {\r\n      return true //we dont' test if its required here\r\n    }\r\n  }\r\n\r\n  get uncertaintyUnitOkay() {\r\n    if(this.uncertainty) {\r\n      if(!this.uncertaintyUnit || !this.uncertaintyUnit.trim() || !['m','km'].contains(this.uncertaintyUnit.trim())){\r\n        return false\r\n      }\r\n    }\r\n    //else\r\n    return true\r\n  }\r\n}\r\n\r\n"]}