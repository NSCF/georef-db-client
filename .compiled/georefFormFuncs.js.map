{"version":3,"sources":["../src/components/georef/georefFormFuncs.js"],"names":["isEmpty","val","Boolean","trim","undefined","georefsEqual","georef1","georef2","selected","obj1","JSON","parse","stringify","obj2","keys","Set","Object","key","add","Array","from","hasOwnProperty"],"mappings":";AACA,IAAMA,UAAU,SAAVA,OAAU,MAAO;AACrB,MAAG,OAAOC,GAAP,IAAc,QAAjB,EAA2B;AACzB,WAAO,CAACC,QAAQD,IAAIE,IAAJ,EAAR,CAAR;AACD,GAFD;AAGK;AACH,WAAOF,QAAQ,IAAR,IAAgBA,QAAQG,SAA/B;AACD;AACF,CAPD;;AASA,IAAMC,eAAe,SAAfA,YAAe,CAACC,OAAD,EAAUC,OAAV,EAAsB;;AAEzC,SAAOD,QAAQE,QAAf;AACA,SAAOD,QAAQC,QAAf;;AAEA;AACA,MAAIC,OAAOC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeN,OAAf,CAAX,CAAX;AACA,MAAIO,OAAOH,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeL,OAAf,CAAX,CAAX;;AAEA,MAAIO,OAAO,IAAIC,GAAJ,EAAX,CATyC;AAUzC,yBAAgBC,OAAOF,IAAP,CAAYL,IAAZ,CAAhB,8HAAkC,KAAzBQ,GAAyB;AAChCH,WAAKI,GAAL,CAASD,GAAT;AACD,KAZwC;AAazC,0BAAgBD,OAAOF,IAAP,CAAYD,IAAZ,CAAhB,mIAAkC,KAAzBI,IAAyB;AAChCH,WAAKI,GAAL,CAASD,IAAT;AACD,KAfwC;;AAiBzC,0BAAgBE,MAAMC,IAAN,CAAWN,IAAX,CAAhB,mIAAiC,KAAxBG,KAAwB;AAC/B,UAAGR,KAAKY,cAAL,CAAoBJ,KAApB,CAAH,EAA4B;AAC1B,YAAGJ,KAAKQ,cAAL,CAAoBJ,KAApB,CAAH,EAA4B;AAC1B;AACA,cAAGjB,QAAQS,KAAKQ,KAAL,CAAR,KAAsB,CAACjB,QAAQa,KAAKI,KAAL,CAAR,CAA1B,EAA6C;AAC3C,mBAAO,KAAP;AACD;;AAED,cAAG,CAACjB,QAAQS,KAAKQ,KAAL,CAAR,CAAD,IAAuBjB,QAAQa,KAAKI,KAAL,CAAR,CAA1B,EAA6C;AAC3C,mBAAO,KAAP;AACD;;AAED;AACA,cAAGR,KAAKQ,KAAL,KAAaJ,KAAKI,KAAL,CAAhB,EAA2B;AACzB,mBAAO,KAAP;AACD;;AAEF,SAfD;AAgBK;AACH;AACA,cAAG,CAACjB,QAAQS,KAAKQ,KAAL,CAAR,EAAmB,IAAnB,CAAJ,EAA8B;AAC5B,mBAAO,KAAP;AACD;AACF;AACF,OAvBD;AAwBK,OAAE;AACL,YAAG,CAACjB,QAAQa,KAAKI,KAAL,CAAR,EAAmB,IAAnB,CAAJ,EAA8B;AAC5B,iBAAO,KAAP;AACD;AACF;AACF;;AAED;AAjDyC,0NAkDzC,OAAO,IAAP;;AAED,CApDD,C;;AAsDSZ,Y,GAAAA,Y","file":"georefFormFuncs.js","sourcesContent":["\r\nconst isEmpty = val => {\r\n  if(typeof val == 'string') {\r\n    return !Boolean(val.trim())\r\n  }\r\n  else {\r\n    return val === null || val === undefined\r\n  }\r\n}\r\n\r\nconst georefsEqual = (georef1, georef2) => {\r\n\r\n  delete georef1.selected\r\n  delete georef2.selected\r\n\r\n  //convert to plain objects\r\n  let obj1 = JSON.parse(JSON.stringify(georef1))\r\n  let obj2 = JSON.parse(JSON.stringify(georef2))\r\n  \r\n  let keys = new Set()\r\n  for (let key of Object.keys(obj1)){\r\n    keys.add(key)\r\n  }\r\n  for (let key of Object.keys(obj2)){\r\n    keys.add(key)\r\n  }\r\n\r\n  for (let key of Array.from(keys)){\r\n    if(obj1.hasOwnProperty(key)){\r\n      if(obj2.hasOwnProperty(key)){\r\n        //if empty on one it must be empty on the other\r\n        if(isEmpty(obj1[key]) && !isEmpty(obj2[key])){\r\n          return false\r\n        }\r\n\r\n        if(!isEmpty(obj1[key]) && isEmpty(obj2[key])){\r\n          return false\r\n        }\r\n\r\n        //they both have a value\r\n        if(obj1[key] != obj2[key]) {\r\n          return false\r\n        }\r\n\r\n      }\r\n      else {\r\n        //they key is on 1 but not 2 so it must be empty\r\n        if(!isEmpty(obj1[key], true)) {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n    else { //it must have been on 2 so it must be null or empty there\r\n      if(!isEmpty(obj2[key], true)) {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  //we got through it all, they must be equal\r\n  return true\r\n\r\n}\r\n\r\nexport { georefsEqual }"]}